<?php
/**
 * DomainSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  GoDaddyDomainsClient
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.4.8
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GoDaddyDomainsClient\Model;

use \ArrayAccess;

/**
 * DomainSummary Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     GoDaddyDomainsClient
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DomainSummary implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DomainSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'domain_id' => 'double',
        'domain' => 'string',
        'status' => 'string',
        'expires' => 'string',
        'expiration_protected' => 'bool',
        'hold_registrar' => 'bool',
        'locked' => 'bool',
        'privacy' => 'bool',
        'renew_auto' => 'bool',
        'renewable' => 'bool',
        'renew_deadline' => 'string',
        'transfer_protected' => 'bool',
        'created_at' => 'string',
        'auth_code' => 'string',
        'name_servers' => 'string[]',
        'contact_registrant' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_billing' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_admin' => '\GoDaddyDomainsClient\Model\Contact',
        'contact_tech' => '\GoDaddyDomainsClient\Model\Contact'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'domain_id' => 'domainId',
        'domain' => 'domain',
        'status' => 'status',
        'expires' => 'expires',
        'expiration_protected' => 'expirationProtected',
        'hold_registrar' => 'holdRegistrar',
        'locked' => 'locked',
        'privacy' => 'privacy',
        'renew_auto' => 'renewAuto',
        'renewable' => 'renewable',
        'renew_deadline' => 'renewDeadline',
        'transfer_protected' => 'transferProtected',
        'created_at' => 'createdAt',
        'auth_code' => 'authCode',
        'name_servers' => 'nameServers',
        'contact_registrant' => 'contactRegistrant',
        'contact_billing' => 'contactBilling',
        'contact_admin' => 'contactAdmin',
        'contact_tech' => 'contactTech'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'domain_id' => 'setDomainId',
        'domain' => 'setDomain',
        'status' => 'setStatus',
        'expires' => 'setExpires',
        'expiration_protected' => 'setExpirationProtected',
        'hold_registrar' => 'setHoldRegistrar',
        'locked' => 'setLocked',
        'privacy' => 'setPrivacy',
        'renew_auto' => 'setRenewAuto',
        'renewable' => 'setRenewable',
        'renew_deadline' => 'setRenewDeadline',
        'transfer_protected' => 'setTransferProtected',
        'created_at' => 'setCreatedAt',
        'auth_code' => 'setAuthCode',
        'name_servers' => 'setNameServers',
        'contact_registrant' => 'setContactRegistrant',
        'contact_billing' => 'setContactBilling',
        'contact_admin' => 'setContactAdmin',
        'contact_tech' => 'setContactTech'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'domain_id' => 'getDomainId',
        'domain' => 'getDomain',
        'status' => 'getStatus',
        'expires' => 'getExpires',
        'expiration_protected' => 'getExpirationProtected',
        'hold_registrar' => 'getHoldRegistrar',
        'locked' => 'getLocked',
        'privacy' => 'getPrivacy',
        'renew_auto' => 'getRenewAuto',
        'renewable' => 'getRenewable',
        'renew_deadline' => 'getRenewDeadline',
        'transfer_protected' => 'getTransferProtected',
        'created_at' => 'getCreatedAt',
        'auth_code' => 'getAuthCode',
        'name_servers' => 'getNameServers',
        'contact_registrant' => 'getContactRegistrant',
        'contact_billing' => 'getContactBilling',
        'contact_admin' => 'getContactAdmin',
        'contact_tech' => 'getContactTech'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['domain_id'] = isset($data['domain_id']) ? $data['domain_id'] : null;
        $this->container['domain'] = isset($data['domain']) ? $data['domain'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['expiration_protected'] = isset($data['expiration_protected']) ? $data['expiration_protected'] : null;
        $this->container['hold_registrar'] = isset($data['hold_registrar']) ? $data['hold_registrar'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['privacy'] = isset($data['privacy']) ? $data['privacy'] : null;
        $this->container['renew_auto'] = isset($data['renew_auto']) ? $data['renew_auto'] : null;
        $this->container['renewable'] = isset($data['renewable']) ? $data['renewable'] : null;
        $this->container['renew_deadline'] = isset($data['renew_deadline']) ? $data['renew_deadline'] : null;
        $this->container['transfer_protected'] = isset($data['transfer_protected']) ? $data['transfer_protected'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['auth_code'] = isset($data['auth_code']) ? $data['auth_code'] : null;
        $this->container['name_servers'] = isset($data['name_servers']) ? $data['name_servers'] : null;
        $this->container['contact_registrant'] = isset($data['contact_registrant']) ? $data['contact_registrant'] : null;
        $this->container['contact_billing'] = isset($data['contact_billing']) ? $data['contact_billing'] : null;
        $this->container['contact_admin'] = isset($data['contact_admin']) ? $data['contact_admin'] : null;
        $this->container['contact_tech'] = isset($data['contact_tech']) ? $data['contact_tech'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['domain_id'] === null) {
            $invalid_properties[] = "'domain_id' can't be null";
        }
        if ($this->container['domain'] === null) {
            $invalid_properties[] = "'domain' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        if ($this->container['expiration_protected'] === null) {
            $invalid_properties[] = "'expiration_protected' can't be null";
        }
        if ($this->container['hold_registrar'] === null) {
            $invalid_properties[] = "'hold_registrar' can't be null";
        }
        if ($this->container['locked'] === null) {
            $invalid_properties[] = "'locked' can't be null";
        }
        if ($this->container['privacy'] === null) {
            $invalid_properties[] = "'privacy' can't be null";
        }
        if ($this->container['renew_auto'] === null) {
            $invalid_properties[] = "'renew_auto' can't be null";
        }
        if ($this->container['renew_deadline'] === null) {
            $invalid_properties[] = "'renew_deadline' can't be null";
        }
        if ($this->container['transfer_protected'] === null) {
            $invalid_properties[] = "'transfer_protected' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalid_properties[] = "'created_at' can't be null";
        }
        if ($this->container['contact_registrant'] === null) {
            $invalid_properties[] = "'contact_registrant' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['domain_id'] === null) {
            return false;
        }
        if ($this->container['domain'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        if ($this->container['expiration_protected'] === null) {
            return false;
        }
        if ($this->container['hold_registrar'] === null) {
            return false;
        }
        if ($this->container['locked'] === null) {
            return false;
        }
        if ($this->container['privacy'] === null) {
            return false;
        }
        if ($this->container['renew_auto'] === null) {
            return false;
        }
        if ($this->container['renew_deadline'] === null) {
            return false;
        }
        if ($this->container['transfer_protected'] === null) {
            return false;
        }
        if ($this->container['created_at'] === null) {
            return false;
        }
        if ($this->container['contact_registrant'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets domain_id
     * @return double
     */
    public function getDomainId()
    {
        return $this->container['domain_id'];
    }

    /**
     * Sets domain_id
     * @param double $domain_id Unique identifier for this Domain
     * @return $this
     */
    public function setDomainId($domain_id)
    {
        $this->container['domain_id'] = $domain_id;

        return $this;
    }

    /**
     * Gets domain
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     * @param string $domain Name of the domain
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Processing status of the domain<br/><ul> <li><strong style='margin-left: 12px;'>ACTIVE</strong> - All is well</li> <li><strong style='margin-left: 12px;'>AWAITING*</strong> - System is waiting for the end-user to complete an action</li> <li><strong style='margin-left: 12px;'>CANCELLED*</strong> - Domain has been cancelled, and may or may not be reclaimable</li> <li><strong style='margin-left: 12px;'>CONFISCATED</strong> - Domain has been confiscated, usually for abuse, chargeback, or fraud</li> <li><strong style='margin-left: 12px;'>DISABLED*</strong> - Domain has been disabled</li> <li><strong style='margin-left: 12px;'>EXCLUDED*</strong> - Domain has been excluded from Firehose registration</li> <li><strong style='margin-left: 12px;'>EXPIRED*</strong> - Domain has expired</li> <li><strong style='margin-left: 12px;'>FAILED*</strong> - Domain has failed a required action, and the system is no longer retrying</li> <li><strong style='margin-left: 12px;'>HELD*</strong> - Domain has been placed on hold, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>LOCKED*</strong> - Domain has been locked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PARKED*</strong> - Domain has been parked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>PENDING*</strong> - Domain is working its way through an automated workflow</li> <li><strong style='margin-left: 12px;'>RESERVED*</strong> - Domain is reserved, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>REVERTED</strong> - Domain has been reverted, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>SUSPENDED*</strong> - Domain has been suspended, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>TRANSFERRED*</strong> - Domain has been transferred out</li> <li><strong style='margin-left: 12px;'>UNKNOWN</strong> - Domain is in an unknown state</li> <li><strong style='margin-left: 12px;'>UNLOCKED*</strong> - Domain has been unlocked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UNPARKED*</strong> - Domain has been unparked, and likely requires intervention from Support</li> <li><strong style='margin-left: 12px;'>UPDATED*</strong> - Domain ownership has been transferred to another account</li> </ul>
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expires
     * @return \GoDaddyDomainsClient\Model\Datetime
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     * @param \GoDaddyDomainsClient\Model\Datetime $expires Date and time when this domain will expire
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets expiration_protected
     * @return bool
     */
    public function getExpirationProtected()
    {
        return $this->container['expiration_protected'];
    }

    /**
     * Sets expiration_protected
     * @param bool $expiration_protected Whether or not the domain is protected from expiration
     * @return $this
     */
    public function setExpirationProtected($expiration_protected)
    {
        $this->container['expiration_protected'] = $expiration_protected;

        return $this;
    }

    /**
     * Gets hold_registrar
     * @return bool
     */
    public function getHoldRegistrar()
    {
        return $this->container['hold_registrar'];
    }

    /**
     * Sets hold_registrar
     * @param bool $hold_registrar Whether or not the domain is on-hold by the registrar
     * @return $this
     */
    public function setHoldRegistrar($hold_registrar)
    {
        $this->container['hold_registrar'] = $hold_registrar;

        return $this;
    }

    /**
     * Gets locked
     * @return bool
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     * @param bool $locked Whether or not the domain is locked to prevent transfers
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets privacy
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     * @param bool $privacy Whether or not the domain has privacy protection
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets renew_auto
     * @return bool
     */
    public function getRenewAuto()
    {
        return $this->container['renew_auto'];
    }

    /**
     * Sets renew_auto
     * @param bool $renew_auto Whether or not the domain is configured to automatically renew
     * @return $this
     */
    public function setRenewAuto($renew_auto)
    {
        $this->container['renew_auto'] = $renew_auto;

        return $this;
    }

    /**
     * Gets renewable
     * @return bool
     */
    public function getRenewable()
    {
        return $this->container['renewable'];
    }

    /**
     * Sets renewable
     * @param bool $renewable Whether or not the domain is eligble for renewal based on status
     * @return $this
     */
    public function setRenewable($renewable)
    {
        $this->container['renewable'] = $renewable;

        return $this;
    }

    /**
     * Gets renew_deadline
     * @return \GoDaddyDomainsClient\Model\Datetime
     */
    public function getRenewDeadline()
    {
        return $this->container['renew_deadline'];
    }

    /**
     * Sets renew_deadline
     * @param \GoDaddyDomainsClient\Model\Datetime $renew_deadline Date the domain must renew on
     * @return $this
     */
    public function setRenewDeadline($renew_deadline)
    {
        $this->container['renew_deadline'] = $renew_deadline;

        return $this;
    }

    /**
     * Gets transfer_protected
     * @return bool
     */
    public function getTransferProtected()
    {
        return $this->container['transfer_protected'];
    }

    /**
     * Sets transfer_protected
     * @param bool $transfer_protected Whether or not the domain is protected from transfer
     * @return $this
     */
    public function setTransferProtected($transfer_protected)
    {
        $this->container['transfer_protected'] = $transfer_protected;

        return $this;
    }

    /**
     * Gets created_at
     * @return \GoDaddyDomainsClient\Model\Datetime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     * @param \GoDaddyDomainsClient\Model\Datetime $created_at Date and time when this domain was created
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets auth_code
     * @return string
     */
    public function getAuthCode()
    {
        return $this->container['auth_code'];
    }

    /**
     * Sets auth_code
     * @param string $auth_code Authorization code for transferring the Domain
     * @return $this
     */
    public function setAuthCode($auth_code)
    {
        $this->container['auth_code'] = $auth_code;

        return $this;
    }

    /**
     * Gets name_servers
     * @return string[]
     */
    public function getNameServers()
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     * @param string[] $name_servers Fully-qualified domain names for DNS servers
     * @return $this
     */
    public function setNameServers($name_servers)
    {
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets contact_registrant
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactRegistrant()
    {
        return $this->container['contact_registrant'];
    }

    /**
     * Sets contact_registrant
     * @param \GoDaddyDomainsClient\Model\Contact $contact_registrant Registration contact for the domain
     * @return $this
     */
    public function setContactRegistrant($contact_registrant)
    {
        $this->container['contact_registrant'] = $contact_registrant;

        return $this;
    }

    /**
     * Gets contact_billing
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactBilling()
    {
        return $this->container['contact_billing'];
    }

    /**
     * Sets contact_billing
     * @param \GoDaddyDomainsClient\Model\Contact $contact_billing Billing contact for the domain registration
     * @return $this
     */
    public function setContactBilling($contact_billing)
    {
        $this->container['contact_billing'] = $contact_billing;

        return $this;
    }

    /**
     * Gets contact_admin
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactAdmin()
    {
        return $this->container['contact_admin'];
    }

    /**
     * Sets contact_admin
     * @param \GoDaddyDomainsClient\Model\Contact $contact_admin Administrative contact for the domain registration
     * @return $this
     */
    public function setContactAdmin($contact_admin)
    {
        $this->container['contact_admin'] = $contact_admin;

        return $this;
    }

    /**
     * Gets contact_tech
     * @return \GoDaddyDomainsClient\Model\Contact
     */
    public function getContactTech()
    {
        return $this->container['contact_tech'];
    }

    /**
     * Sets contact_tech
     * @param \GoDaddyDomainsClient\Model\Contact $contact_tech Technical contact for the domain registration
     * @return $this
     */
    public function setContactTech($contact_tech)
    {
        $this->container['contact_tech'] = $contact_tech;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\GoDaddyDomainsClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


